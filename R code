require(plyr)
require(stringr)

#get sentences
path = paste( "E:/WC/WC-demo.txt", sep = "")
conn <- file(path,open="r")
sentences <- readLines(conn)                                             
close(conn)

#get pos.words
path = paste( "E:/WC/positive-words.txt", sep = "")
conn <- file(path,open="r")
positives <- readLines(conn)                                            
close(conn)
pos.words=str_split(positives, '\\s+')

#get neg.words
path = paste( "E:/WC/negative-words.txt", sep = "")
conn <- file(path,open="r")
negatives <- readLines(conn)                                             
close(conn)
neg.words=str_split(negatives, '\\s+')

#Calculate Scores
scores = laply(sentences, function(sentences, pos.words, neg.words) {
    
    # clean up sentences with R's regex-driven global substitute, gsub():
    sentence = gsub('[[:punct:]]', '', sentences)
    sentence = gsub('[[:cntrl:]]', '', sentence)
    sentence = gsub('\\d+', '', sentence)
    # and convert to lower case:
    sentence = tolower(sentence)
    
    # split into words. str_split is in the stringr package
    word.list = str_split(sentence, '\\s+')
    # sometimes a list() is one level of hierarchy too much
    words = unlist(word.list)
    
    # compare our words to the dictionaries of positive & negative terms
    pos.matches = match(words, pos.words)
    neg.matches = match(words, neg.words)
    
    # match() returns the position of the matched term or NA
    # we just want a TRUE/FALSE:
    pos.matches = !is.na(pos.matches)
    neg.matches = !is.na(neg.matches)
    
    # and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
    score = sum(pos.matches) - sum(neg.matches)
    
    return(score)
  }, pos.words, neg.words )
  
  scores.df = data.frame(score=scores, text=sentences)

## [1] "black"   "red"     "green3"  "blue"    "cyan"    "magenta"
## [7] "yellow"  "gray"

plot(scores.df, pch = 18,col='12')
  
